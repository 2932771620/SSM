<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--    扫描控制层组件-->
    <context:component-scan base-package="com.atguigu"></context:component-scan>
<!---->


    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

<!--    配置默认的servlet处理静态资源
        当前工程的web.xml的前端控制器的url-pattern是/
        tomcat的web.xml配置的DefaultServlet的url-pattern也是/
        此时浏览器发送的请求优先被前端控制器进行处理，但是前端控制器无法处理静态资源
        若配置了 <mvc:default-servlet-handler/>，则前端发送的所有请求都会被 <mvc:default-servlet-handler/>进行处理
        如配置了 <mvc:default-servlet-handler/>和    <mvc:annotation-driven/>
        浏览器发送的请求会先被前端控制器进行处理，无法处理再交给DefaultServlet进行处理
-->
    <mvc:default-servlet-handler/>

<!--    开启mvc的注解驱动-->
    <mvc:annotation-driven/>

<!--    配置视图控制器-->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>
    
<!--    配置文件上传解析器-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

    </bean>

<!--    <bean id="firstInterceptor" class="com.atguigu.interceptor.FirstInterceptor"></bean>-->

<!--    配置拦截器-->
<!--    <mvc:interceptors>-->
<!--        <ref bean="firstInterceptor"></ref>-->
<!--        <ref bean="secondInterceptor"></ref>-->

<!--        &lt;!&ndash;        bean和ref标签所配置的拦截器默认对DisPatchServlet处理的所有请求进行拦截&ndash;&gt;-->
<!--&lt;!&ndash;        <bean class="com.atguigu.interceptor.FirstInterceptor"/>&ndash;&gt;-->
<!--&lt;!&ndash;        <ref bean="firstInterceptor"></ref>&ndash;&gt;-->
<!--&lt;!&ndash;        <mvc:interceptor>&ndash;&gt;-->
<!--&lt;!&ndash;            以上配置方式可以通过ref或bean标签设置拦截器，-->
<!--                通过mvc:mapping设置需要拦截的请求，通过-->
<!--                mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求-->
<!--&ndash;&gt;-->
<!--&lt;!&ndash;            <mvc:mapping path="/**"/>&ndash;&gt;-->
<!--&lt;!&ndash;            <mvc:exclude-mapping path="/abc"/>&ndash;&gt;-->
<!--&lt;!&ndash;            <ref bean="firstInterceptor"></ref>&ndash;&gt;-->
<!--&lt;!&ndash;        </mvc:interceptor>&ndash;&gt;-->
<!--    </mvc:interceptors>-->


<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
<!--        <property name="exceptionMappings">-->
<!--            <props>-->
<!--&lt;!&ndash;                key设置要处理的异常，value表示出现异常要跳转的页面&ndash;&gt;-->
<!--                <prop key="java.lang.ArithmeticException">error</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--&lt;!&ndash;        设置共享在请求域中异常信息的属性名&ndash;&gt;-->
<!--        <property name="exceptionAttribute" value="ex"></property>-->
<!--    </bean>-->

</beans>